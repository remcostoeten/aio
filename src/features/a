auth form

"use client"

import { OAuthButtons } from './oauth-buttons'
import { EmailForm } from './email-form'
import { theme } from '@/shared/config/theme'

export function AuthForm({ type }: { type: 'login' | 'register' }) {
  return (
    <div className="space-y-6">
      <OAuthButtons />
      
      <div className="relative">
        <div className="absolute inset-0 flex items-center">
          <div className="w-full border-t border-[#2F2F2F]" />
        </div>
        <div className="relative flex justify-center text-xs uppercase">
          <span className={`bg-[${theme.colors.background.default}] px-2 text-neutral-400`}>
            or continue with email
          </span>
        </div>
      </div>

      <EmailForm type={type} />

      <div className="text-xs text-center text-neutral-400 pt-4">
        By continuing, you agree to our{' '}
        <a href="#" className={`text-[${theme.colors.primary}] hover:text-[${theme.colors.primary}]/80 transition-colors`}>Terms of Service</a>
        {' '}and{' '}
        <a href="#" className={`text-[${theme.colors.primary}] hover:text-[${theme.colors.primary}]/80 transition-colors`}>Privacy Policy</a>
      </div>
    </div>
  )
}


email form
"use client"

import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { Input } from '@/shared/components/ui/input'
import { Button } from '@/shared/components/ui/button'
import { PasswordField } from './password-field'
import { Checkbox } from '@/shared/components/ui/checkbox'
import { cn } from '@/shared/helpers'
import { theme } from '@/sharfed/config/theme'

interface FormData {
  email: string
  password: string
  rememberMe: boolean
}

export function EmailForm({ type }: { type: 'login' | 'register' }) {
  const [loading, setLoading] = useState(false)
  const { register, handleSubmit, formState: { errors } } = useForm<FormData>()

  const onSubmit = async (data: FormData) => {
    setLoading(true)
    // Handle form submission
    setLoading(false)
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div className="space-y-2">
        <Input
          type="email"
          placeholder="Email"
          {...register('email', {
            required: 'Email is required',
            pattern: {
              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
              message: 'Invalid email address'
            }
          })}
          className={cn(
            `bg-[${theme.colors.background.input}] border-[${theme.colors.border.default}]`,
            errors.email && `border-[${ colors.border.error}]`
          )}
        />
        {errors.email && (
          <p className="text-sm text-red-500">{errors.email.message}</p>
        )}
      </div>

      <PasswordField
        register={register}
        error={errors.password}
        showStrength={type === 'register'}
      />

      <div className="flex items-center justify-between">
        <label className="flex items-center gap-2">
          <Checkbox {...register('rememberMe')} />
          <span className={`text-sm text-[${theme.colors.text.muted}]`}>Remember me</span>
        </label>
        
        <a 
          href="#" 
          className={`text-sm text-[${theme.colors.primary}] hover:text-[${theme.colors.primary}]/80 transition-colors`}
        >
          Forgot password?
        </a>
      </div>

      <Button
        type="submit"
        disabled={loading}
        className={cn(
          "w-full h-10",
          `bg-[${theme.colors.primary}] hover:bg-[${theme.colors.primary}]/90`,
          "text-white"
        )}
      >
        {loading ? (
          <div className="h-5 w-5 animate-spin rounded-full border-2 border-white border-t-transparent" />
        ) : (
          type === 'login' ? 'Sign In' : 'Sign Up'
        )}
      </Button>
    </form>
  )
}


theme-selector.tsx

"use client"

import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/shared/components/ui/select"
import { Palette } from "lucide-react"
import type { EditorTheme } from "@/shared/hooks/use-editor-theme"

interface ThemeSelectorProps {
  theme: EditorTheme
  onThemeChange: (theme: EditorTheme) => void
}

const THEMES: { value: EditorTheme; label: string }[] = [
  { value: "dracula", label: "Dracula" },
  { value: "monokai", label: "Monokai" },
  { value: "solarized-dark", label: "Solarized Dark" },
  { value: "vs-dark", label: "Visual Studio Dark" },
]

export function ThemeSelector({ theme, onThemeChange }: ThemeSelectorProps) {
  return (
    <div className="relative">
      <Select value={theme} onValueChange={(value) => onThemeChange(value as EditorTheme)}>
        <SelectTrigger className="w-[180px] gap-2">
          <Palette className="w-4 h-4" />
          <SelectValue />
        </SelectTrigger>
        <SelectContent>
          {THEMES.map((theme) => (
            <SelectItem key={theme.value} value={theme.value}>
              {theme.label}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
    </div>
  )
}